{"ast":null,"code":"var _jsxFileName = \"/Users/maximelevacher/Documents/crossfit-site/src/components/WodGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WodGenerator = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [wod, setWod] = useState('');\n  const [error, setError] = useState(null);\n  const generateWod = async () => {\n    setLoading(true);\n    setError(null);\n    setWod('');\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `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` // <-- replace this\n        },\n        body: JSON.stringify({\n          model: 'gpt-4.0',\n          messages: [{\n            role: 'user',\n            content: 'Generate a CrossFit WOD for today. Include warm-up, workout, and cool-down.'\n          }],\n          temperature: 0.7\n        })\n      });\n      const data = await response.json();\n      const message = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content;\n      if (message) {\n        setWod(message.trim());\n      } else {\n        setError('No WOD received.');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Failed to generate WOD.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wod-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Workout of the Day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateWod,\n      disabled: loading,\n      children: loading ? 'Generating...' : 'Generate WOD'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), wod && /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"wod-output\",\n      children: wod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WodGenerator, \"lXTJ0UDxDZg22B4Fa34yR+wC1l8=\");\n_c = WodGenerator;\nexport default WodGenerator;\nvar _c;\n$RefreshReg$(_c, \"WodGenerator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WodGenerator","_s","loading","setLoading","wod","setWod","error","setError","generateWod","_data$choices","_data$choices$","_data$choices$$messag","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","temperature","data","json","message","choices","trim","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["/Users/maximelevacher/Documents/crossfit-site/src/components/WodGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst WodGenerator = () => {\n  const [loading, setLoading] = useState(false);\n  const [wod, setWod] = useState('');\n  const [error, setError] = useState(null);\n\n  const generateWod = async () => {\n    setLoading(true);\n    setError(null);\n    setWod('');\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `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`, // <-- replace this\n        },\n        body: JSON.stringify({\n          model: 'gpt-4.0',\n          messages: [\n            {\n              role: 'user',\n              content: 'Generate a CrossFit WOD for today. Include warm-up, workout, and cool-down.',\n            },\n          ],\n          temperature: 0.7,\n        }),\n      });\n\n      const data = await response.json();\n      const message = data.choices?.[0]?.message?.content;\n\n      if (message) {\n        setWod(message.trim());\n      } else {\n        setError('No WOD received.');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Failed to generate WOD.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"wod-container\">\n      <h2>Workout of the Day</h2>\n      <button onClick={generateWod} disabled={loading}>\n        {loading ? 'Generating...' : 'Generate WOD'}\n      </button>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {wod && (\n        <pre className=\"wod-output\">{wod}</pre>\n      )}\n    </div>\n  );\n};\n\nexport default WodGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}