{"ast":null,"code":"var _jsxFileName = \"/Users/maximelevacher/Documents/crossfit-site/src/pages/Wod.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MuscleMapFull from '../components/MuscleMap/MuscleMapFull';\nimport './Wod.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WOD_PARTS = ['warmup', 'strength', 'metcon'];\nconst Wod = () => {\n  _s();\n  const [selectedMuscle, setSelectedMuscle] = useState(null);\n  const [exercises, setExercises] = useState([]);\n  const [randomWod, setRandomWod] = useState(null);\n  const handleMuscleSelect = muscle => {\n    setSelectedMuscle(muscle);\n    setRandomWod(null);\n  };\n  useEffect(() => {\n    if (!selectedMuscle) return;\n    fetch(`/exercises/${selectedMuscle}.txt`).then(res => res.text()).then(text => {\n      // Split by double newline for groups\n      const blocks = text.split(/\\n\\s*\\n/).map(block => block.trim().split('\\n').filter(Boolean));\n      setExercises(blocks);\n    }).catch(() => setExercises([]));\n  }, [selectedMuscle]);\n  const generateRandomWod = () => {\n    const parts = {};\n    WOD_PARTS.forEach(part => {\n      const muscleList = ['quads', 'glutes', 'hamstrings', 'pecs', 'lats', 'abs', 'triceps', 'biceps', 'calves'];\n      const muscle = muscleList[Math.floor(Math.random() * muscleList.length)];\n      parts[part] = {\n        muscle,\n        exercise: null\n      };\n    });\n\n    // Load exercise text files for all 3 parts\n    Promise.all(Object.values(parts).map(item => fetch(`/exercises/${item.muscle}.txt`).then(res => res.text()).then(text => {\n      const list = text.split('\\n').filter(Boolean);\n      return list[Math.floor(Math.random() * list.length)];\n    }).catch(() => 'Rest'))).then(exs => {\n      let i = 0;\n      for (let key of WOD_PARTS) {\n        parts[key].exercise = exs[i++];\n      }\n      setRandomWod(parts);\n      setSelectedMuscle(null);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wod-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wod-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"wod-title\",\n        children: \"\\uD83D\\uDD25 Generate Your WOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateRandomWod,\n        className: \"random-btn\",\n        children: \"\\uD83C\\uDFB2 Generate Full WOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"section-title\",\n        children: \"Or Select a Muscle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MuscleMapFull, {\n        onSelect: handleMuscleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), selectedMuscle && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exercise-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"muscle-banner\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"muscle-icon\",\n            children: \"\\uD83D\\uDCAA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"muscle-label\",\n            children: selectedMuscle.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"exercise-vertical-layout\",\n          children: exercises.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"exercise-vertical-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exercise-card-header\",\n              children: [\"Group \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"exercise-list\",\n              children: group.map((exercise, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"exercise-list-item\",\n                children: [\"\\uD83C\\uDFCB\\uFE0F \", exercise]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 31\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 25\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this), randomWod && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"random-wod\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD83D\\uDD25 Full WOD:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), WOD_PARTS.map(part => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wod-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: part.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: randomWod[part].exercise\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this), \" (\", randomWod[part].muscle, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 23\n          }, this)]\n        }, part, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n_s(Wod, \"YvguzWPfT+O8Wb1Kmu3PnL1FRE0=\");\n_c = Wod;\nexport default Wod;\nvar _c;\n$RefreshReg$(_c, \"Wod\");","map":{"version":3,"names":["React","useState","useEffect","MuscleMapFull","jsxDEV","_jsxDEV","WOD_PARTS","Wod","_s","selectedMuscle","setSelectedMuscle","exercises","setExercises","randomWod","setRandomWod","handleMuscleSelect","muscle","fetch","then","res","text","blocks","split","map","block","trim","filter","Boolean","catch","generateRandomWod","parts","forEach","part","muscleList","Math","floor","random","length","exercise","Promise","all","Object","values","item","list","exs","i","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSelect","toUpperCase","group","index","idx","_c","$RefreshReg$"],"sources":["/Users/maximelevacher/Documents/crossfit-site/src/pages/Wod.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MuscleMapFull from '../components/MuscleMap/MuscleMapFull';\nimport './Wod.css';\n\nconst WOD_PARTS = ['warmup', 'strength', 'metcon'];\n\nconst Wod = () => {\n  const [selectedMuscle, setSelectedMuscle] = useState(null);\n  const [exercises, setExercises] = useState([]);\n  const [randomWod, setRandomWod] = useState(null);\n\n  const handleMuscleSelect = (muscle) => {\n    setSelectedMuscle(muscle);\n    setRandomWod(null);\n  };\n\n  useEffect(() => {\n    if (!selectedMuscle) return;\n\n    fetch(`/exercises/${selectedMuscle}.txt`)\n        .then((res) => res.text())\n        .then((text) => {\n          // Split by double newline for groups\n          const blocks = text\n              .split(/\\n\\s*\\n/)\n              .map(block => block.trim().split('\\n').filter(Boolean));\n          setExercises(blocks);\n        })\n        .catch(() => setExercises([]));\n  }, [selectedMuscle]);\n\n  const generateRandomWod = () => {\n    const parts = {};\n    WOD_PARTS.forEach((part) => {\n      const muscleList = ['quads', 'glutes', 'hamstrings', 'pecs', 'lats', 'abs', 'triceps', 'biceps', 'calves'];\n      const muscle = muscleList[Math.floor(Math.random() * muscleList.length)];\n      parts[part] = {\n        muscle,\n        exercise: null,\n      };\n    });\n\n    // Load exercise text files for all 3 parts\n    Promise.all(\n        Object.values(parts).map((item) =>\n            fetch(`/exercises/${item.muscle}.txt`)\n                .then((res) => res.text())\n                .then((text) => {\n                  const list = text.split('\\n').filter(Boolean);\n                  return list[Math.floor(Math.random() * list.length)];\n                })\n                .catch(() => 'Rest')\n        )\n    ).then((exs) => {\n      let i = 0;\n      for (let key of WOD_PARTS) {\n        parts[key].exercise = exs[i++];\n      }\n      setRandomWod(parts);\n      setSelectedMuscle(null);\n    });\n  };\n\n  return (\n      <div className=\"wod-page\">\n        <div className=\"wod-container\">\n          <h2 className=\"wod-title\">🔥 Generate Your WOD</h2>\n\n          <button onClick={generateRandomWod} className=\"random-btn\">\n            🎲 Generate Full WOD\n          </button>\n\n          <h3 className=\"section-title\">Or Select a Muscle</h3>\n\n          <MuscleMapFull onSelect={handleMuscleSelect} />\n\n          {selectedMuscle && (\n              <div className=\"exercise-section\">\n                <div className=\"muscle-banner\">\n                  <span className=\"muscle-icon\">💪</span>\n                  <h3 className=\"muscle-label\">{selectedMuscle.toUpperCase()}</h3>\n                </div>\n\n                <div className=\"exercise-vertical-layout\">\n                  {exercises.map((group, index) => (\n                      <div key={index} className=\"exercise-vertical-card\">\n                        <div className=\"exercise-card-header\">Group {index + 1}</div>\n                        <ul className=\"exercise-list\">\n                          {group.map((exercise, idx) => (\n                              <li key={idx} className=\"exercise-list-item\">🏋️ {exercise}</li>\n                          ))}\n                        </ul>\n                      </div>\n                  ))}\n                </div>\n              </div>\n          )}\n\n          {randomWod && (\n              <div className=\"random-wod\">\n                <h3>🔥 Full WOD:</h3>\n                {WOD_PARTS.map((part) => (\n                    <div key={part} className=\"wod-block\">\n                      <h4>{part.toUpperCase()}</h4>\n                      <p>\n                        <strong>{randomWod[part].exercise}</strong> ({randomWod[part].muscle})\n                      </p>\n                    </div>\n                ))}\n              </div>\n          )}\n        </div>\n      </div>\n\n  );\n};\n\nexport default Wod;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}